# Makefile authored by Group 24
#=================================================================

# Venkatesh (110050066)
# Ramakrishna (110050054)
# Rohan (110050011)

# for CS 296, Spring 2013

SHELL   = bash
CC      = g++
LD      = ld
RM      = rm
ECHO    = /bin/echo
CAT     = cat
PRINTF  = printf
SED     = sed
DOXYGEN = doxygen
ARCHIVE = ar
MV      = mv
GNP     = gnuplot
UNTAR   = tar xf
CD      = cd
CMAKE   = cmake
MAKE    = make

#=================================================================

# Project Name
TARGETexe     = myDraw

# Project Paths
INSTALL_PATH  =$(PROJECT_ROOT)/bin
PROJECT_ROOT  =/host/Academic/5/cs475/assignments/myDraw
SRCDIR        =$(PROJECT_ROOT)/src
OBJDIR        =$(PROJECT_ROOT)/obj
BINDIR        =$(PROJECT_ROOT)/bin
LIBDIR        =/usr/lib
DOCDIR        =$(PROJECT_ROOT)/doc
CONFDIR       =$(PROJECT_ROOT)/config
DRAWINGSDIR   =$(PROJECT_ROOT)/drawings

# Library Paths
GLUI_ROOT  =/usr
GL_ROOT    =/usr

#Libraries
LIBS = -lglut -lGLU -lGL

# Compiler and Linker flags
CPPFLAGS =  -Wall
LDFLAGS  += -L$(LIBDIR)
ARFLAGS  =  cvr

# Colors
NO_COLOR   =\e[0m
OK_COLOR   =\e[1;32m
ERR_COLOR  =\e[1;31m
WARN_COLOR =\e[1;33m
MESG_COLOR =\e[1;34m
FILE_COLOR =\e[1;37m

# Format Strings
OK_STRING   ="[OK]"
ERR_STRING  ="[ERRORS]"
WARN_STRING ="[WARNINGS]"
OK_FMT      ="${OK_COLOR}%30s\n${NO_COLOR}"
ERR_FMT     ="${ERR_COLOR}%30s\n${NO_COLOR}"
WARN_FMT    ="${WARN_COLOR}%30s\n${NO_COLOR}"

SRCS        :=$(wildcard $(SRCDIR)/*.cpp)
#INCS        :=$(wildcard $(SRCDIR)/*.hpp)
GPTS        :=$(wildcard $(SCRIPTSDIR)/*.gpt)
OBJS        :=$(SRCS:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)
TEXT_OBJS   :=$(TEXT_SRCS:$(TEXT_SRCDIR)/%.cpp=$(TEXT_OBJDIR)/%.o)
GUI_OBJS    :=$(GUI_SRCS:$(GUI_SRCDIR)/%.cpp=$(GUI_OBJDIR)/%.o)
GRAPHS      :=$(GPTS:$(SCRIPTSDIR)/%.gpt=$(PLOTSDIR)/%.png)

#MAIN            =$(OBJDIR)/main.o
REPORT_NAME     =g24_project_report
HTML_DIR        =html

#=================================================================

.PHONY : exe setup clean makelibs exelib plot01 plot02 doc plots

all: release_setup gui_exe doc plot report

exe: setup $(OBJS) $(BINDIR)/$(TARGETexe)

gui_exe: setup $(GUI_OBJS) $(BINDIR)/$(GUIexe)

text_exe: setup $(TEXT_OBJS) $(BINDIR)/$(TEXTexe)

#Note: Putting a space between $(LDFLAGS) and $(LIBS) in the line below makes the linker unable to find -lBox2D.

$(BINDIR)/$(TARGETexe): $(OBJS)
	@$(PRINTF) "$(MESG_COLOR)Building executable:$(NO_COLOR) $(FILE_COLOR) %16s$(NO_COLOR)" "$(notdir $@)"
	@$(CC) -o $@ $(LDFLAGS) $(TEXT_OBJS) $(LIBS) 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else $(PRINTF) $(OK_FMT) $(OK_STRING); \
	fi;
	@$(RM) -f temp.log temp.err

$(BINDIR)/$(GUIexe): $(GUI_OBJS)
	@$(PRINTF) "$(MESG_COLOR)Building executable:$(NO_COLOR) $(FILE_COLOR) %16s$(NO_COLOR)" "$(notdir $@)"
	@$(CC) -o $@ $(LDFLAGS) $(GUI_OBJS) $(LIBS) 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else $(PRINTF) $(OK_FMT) $(OK_STRING); \
	fi;
	@$(RM) -f temp.log temp.err
	
$(BINDIR)/$(TEXTexe): $(TEXT_OBJS)
	@$(PRINTF) "$(MESG_COLOR)Building executable:$(NO_COLOR) $(FILE_COLOR) %16s$(NO_COLOR)" "$(notdir $@)"
	@$(CC) -o $@ $(LDFLAGS) $(TEXT_OBJS) $(LIBS) 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else $(PRINTF) $(OK_FMT) $(OK_STRING); \
	fi;
	@$(RM) -f temp.log temp.err

-include $(OBJS:.o=.d)

$(OBJS): $(OBJDIR)/%.o : $(SRCDIR)/%.cpp
	@$(PRINTF) "$(MESG_COLOR)Compiling: $(NO_COLOR) $(FILE_COLOR) %25s$(NO_COLOR)" "$(notdir $<)"
	@$(CC) $(CPPFLAGS) -c $< -o $@ -MD 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else printf "${OK_COLOR}%30s\n${NO_COLOR}" "[OK]"; \
	fi;
	@$(RM) -f temp.log temp.err
	
$(TEXT_OBJS): $(TEXT_OBJDIR)/%.o : $(TEXT_SRCDIR)/%.cpp
	@$(PRINTF) "$(MESG_COLOR)Compiling: $(NO_COLOR) $(FILE_COLOR) %25s$(NO_COLOR)" "$(notdir $<)"
	@$(CC) $(CPPFLAGS) -c $< -o $@ -MD 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else printf "${OK_COLOR}%30s\n${NO_COLOR}" "[OK]"; \
	fi;
	@$(RM) -f temp.log temp.err
	
$(GUI_OBJS): $(GUI_OBJDIR)/%.o : $(GUI_SRCDIR)/%.cpp
	@$(PRINTF) "$(MESG_COLOR)Compiling: $(NO_COLOR) $(FILE_COLOR) %25s$(NO_COLOR)" "$(notdir $<)"
	@$(CC) $(CPPFLAGS) -c $< -o $@ -MD 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else printf "${OK_COLOR}%30s\n${NO_COLOR}" "[OK]"; \
	fi;
	@$(RM) -f temp.log temp.err
	
setup:
	@$(ECHO) "Setting up the compilation..."
	@if [ ! -d obj ]; then mkdir -p obj; fi;
	@if [ ! -d gui_obj ]; then mkdir -p gui_obj; fi;
	@if [ ! -d text_obj ]; then mkdir -p text_obj; fi;
	@if [ ! -d lib ]; then mkdir -p lib; fi;
	@if [ ! -d bin ]; then mkdir -p bin; fi;
	@if [ ! -d data ]; then mkdir -p data; fi;
	@if [ ! -d plots ]; then mkdir -p plots; fi;
	@$(ECHO) "Done setting up."

#==============================================================================
	
plot: text_exe $(DATADIR)/g24_py.csv plot_matplotlib

$(DATADIR)/g24_py.csv:
	@$(ECHO) "Generating the csv file. This might take a few minutes..."
	@$(PY) $(SCRIPTSDIR)/g24_gen_csv.py
	@$(ECHO) ".csv file generated in data folder"

plot_matplotlib: plots

plots: $(DATADIR)/g24_py.csv
	@$(ECHO) "Generating the plots..."
	@$(PY) $(SCRIPTSDIR)/g24_gen_plots.py
	@$(ECHO) "Plots generated in plots folder"
	
parsed_html: plot_matplotlib
	@$(ECHO) "Generating the HTML report from the tex file..."
	@$(PY) $(SCRIPTSDIR)/g24_gen_html.py
	@$(ECHO) "HTML report generated in doc folder"

#==============================================================================

-include $(OBJSdebug:.o=.d)

debug_setup:
	@rm -rf external/src/Box2D external/include/* external/lib/* data/* plots 2>/dev/null
	@cd $(BOX2D_ROOT)/src; $(UNTAR) Box2D.tgz; $(CD) Box2D; mkdir build296 2>/dev/null; cd build296; $(CMAKE) -DCMAKE_BUILD_TYPE=Release ../; $(MAKE); $(MAKE) install
	
debug_prof: debug_setup setup $(TEXT_OBJS) $(BINDIR)/$(TARGETdebug)
	@$(BINDIR)/$(TARGETdebug) 50000 1>/dev/null
	@gprof $(BINDIR)/$(TARGETdebug) gmon.out > data/g24_release_prof.dat
	@$(RM) gmon.out
	
$(BINDIR)/$(TARGETdebug): $(OBJSrelease)
	@$(PRINTF) "$(MESG_COLOR)Building executable:$(NO_COLOR) $(FILE_COLOR) %16s$(NO_COLOR)" "$(notdir $@)"
	@$(CC) -pg -o $@ $(LDFLAGS) $(TEXT_OBJS) $(LIBS) 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else $(PRINTF) $(OK_FMT) $(OK_STRING); \
	fi;
	@$(RM) -f temp.log temp.err

$(OBJSdebug): $(TEXT_OBJDIR)/%.o : $(TEXT_SRCDIR)/%.cpp
	@$(PRINTF) "$(MESG_COLOR)Compiling: $(NO_COLOR) $(FILE_COLOR) %25s$(NO_COLOR)" "$(notdir $<)"
	@$(CC) $(CPPFLAGS) -pg -c $< -o $@ -MD 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else printf "${OK_COLOR}%30s\n${NO_COLOR}" "[OK]"; \
	fi;
	@$(RM) -f temp.log temp.err
	
#==============================================================================

-include $(OBJSrelease:.o=.d)

release_setup:
	@rm -rf external/src/Box2D external/include/* external/lib/* data/* plots 2>/dev/null
	@cd $(BOX2D_ROOT)/src; $(UNTAR) Box2D.tgz; $(CD) Box2D; mkdir build296 2>/dev/null; cd build296; $(CMAKE) -DCMAKE_BUILD_TYPE=Release ../; $(MAKE); $(MAKE) install
	
release_prof: release_setup setup $(TEXT_OBJS) $(BINDIR)/$(TARGETrelease)
	@$(BINDIR)/$(TARGETrelease) 50000 1>/dev/null
	@gprof $(BINDIR)/$(TARGETrelease) gmon.out > data/g24_release_prof.dat
	@$(RM) gmon.out
	
$(BINDIR)/$(TARGETrelease): $(OBJSrelease)
	@$(PRINTF) "$(MESG_COLOR)Building executable:$(NO_COLOR) $(FILE_COLOR) %16s$(NO_COLOR)" "$(notdir $@)"
	@$(CC) -O3 -pg -o $@ $(LDFLAGS) $(TEXT_OBJS) $(LIBS) 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else $(PRINTF) $(OK_FMT) $(OK_STRING); \
	fi;
	@$(RM) -f temp.log temp.err

$(OBJSrelease): $(TEXT_OBJDIR)/%.o : $(TEXT_SRCDIR)/%.cpp
	@$(PRINTF) "$(MESG_COLOR)Compiling: $(NO_COLOR) $(FILE_COLOR) %25s$(NO_COLOR)" "$(notdir $<)"
	@$(CC) $(CPPFLAGS) -O3 -pg -c $< -o $@ -MD 2> temp.log || touch temp.err
	@if test -e temp.err; \
	then $(PRINTF) $(ERR_FMT) $(ERR_STRING) && $(CAT) temp.log; \
	elif test -s temp.log; \
	then $(PRINTF) $(WARN_FMT) $(WARN_STRING) && $(CAT) temp.log; \
	else printf "${OK_COLOR}%30s\n${NO_COLOR}" "[OK]"; \
	fi;
	@$(RM) -f temp.log temp.err

#==============================================================================

report:
	@$(PRINTF) "Generating project report from tex file $(FILE_COLOR)$(REPORT_NAME).tex$(NO_COLOR)... "
	@pdflatex $(DOCDIR)/$(REPORT_NAME).tex 1>/dev/null
	@$(ECHO) "done!"
	@$(PRINTF) "$(FILE_COLOR)$(REPORT_NAME).pdf$(NO_COLOR) generated in $(FILE_COLOR)$(DOCDIR)$(NO_COLOR)"; $(ECHO)
	@$(RM) -f $(REPORT_NAME).dvi $(REPORT_NAME).aux $(REPORT_NAME).log 2>/dev/null
	@$(MV) $(REPORT_NAME).pdf $(DOCDIR)
	
analysis:
	@$(SCRIPTSDIR)/analysis.sh 1

doc:
	@$(ECHO) -n "Generating Doxygen Documentation ..."
	@$(DOXYGEN) $(DOCDIR)/Doxyfile
	@$(ECHO) "done!"
	@$(PRINTF) "Generated folder $(FILE_COLOR)$(HTML_DIR)$(NO_COLOR) in $(FILE_COLOR)$(DOCDIR)$(NO_COLOR)"; $(ECHO)

clean:
	@$(PRINTF) "Cleaning up:"; $(ECHO)
	@$(PRINTF) "$(MESG_COLOR)Removing: $(FILE_COLOR)obj"; $(RM) -rf text_obj gui_obj obj
	@$(PRINTF) "                   $(OK_COLOR)[OK]$(NO_COLOR)"; $(ECHO)
	@$(PRINTF) "$(MESG_COLOR)Removing: $(FILE_COLOR)lib"; $(RM) -rf lib
	@$(PRINTF) "                   $(OK_COLOR)[OK]$(NO_COLOR)"; $(ECHO)
	@$(PRINTF) "$(MESG_COLOR)Removing: $(FILE_COLOR)bin"; $(RM) -rf bin
	@$(PRINTF) "                   $(OK_COLOR)[OK]$(NO_COLOR)"; $(ECHO)
	@$(PRINTF) "$(MESG_COLOR)Removing: $(NO_COLOR)documentation"; $(RM) -rf $(DOCDIR)/html
	@$(PRINTF) "         $(OK_COLOR)[OK]$(NO_COLOR)"; $(ECHO)
	@$(PRINTF) "$(MESG_COLOR)Removing: $(FILE_COLOR)data"; $(RM) -rf $(DATADIR)
	@$(PRINTF) "                  $(OK_COLOR)[OK]$(NO_COLOR)"; $(ECHO)
	@$(PRINTF) "$(MESG_COLOR)Removing: $(FILE_COLOR)plots"; $(RM) -rf $(PLOTSDIR)
	@$(PRINTF) "                 $(OK_COLOR)[OK]$(NO_COLOR)"; $(ECHO)
	@$(PRINTF) "$(MESG_COLOR)Removing: $(NO_COLOR)project report     "; $(RM) -rf $(DOCDIR)/$(REPORT_NAME).pdf
	@$(PRINTF) "   $(OK_COLOR)[OK]$(NO_COLOR)"; $(ECHO)
	@$(PRINTF) "All removed, done."; $(ECHO)

install:
	@mkdir -p $(INSTALL_PATH)/bin/
	@mkdir -p $(INSTALL_PATH)/scripts/
	@mkdir -p $(INSTALL_PATH)/doc/
	@cp -r $(PROJECT_ROOT)/bin $(PROJECT_ROOT)/scripts/ $(PROJECT_ROOT)/doc $(INSTALL_PATH)/
	
dist : clean
	@rm -rf $(EXTERNAL_ROOT)/src/Box2D
	@rm -rf $(EXTERNAL_ROOT)/lib/*
	@rm -rf $(EXTERNAL_ROOT)/include/*
	@rm -rf $(PROJECT_ROOT)/doc/html
	@rm -rf $(PROJECT_ROOT)/doc/g24_project_report.pdf $(PROJECT_ROOT)/doc/g24_project_report.html
	@rm -rf $(PROJECT_ROOT)/plots 
	@rm -rf $(PROJECT_ROOT)/data
	@cd ..;tar -zcf  cs296_g24_project.tar.gz cs296_base_code
	
#=================================================================
